<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\Exception\RecordNotFoundException;

/**
 * Expenses Controller
 *
 * @property \App\Model\Table\ExpensesTable $Expenses
 */
class ExpensesController extends AppController
{
    private $categories;

    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->response = $this->response->withHeader('Access-Control-Allow-Origin', 'http://localhost:3000')
            ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
            ->withHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization')
            ->withHeader('Access-Control-Allow-Credentials', 'true')
            ->withType('json/application');
        $this->categories = [
            // Basic Needs
            'Rent / Housing Costs',
            'Groceries',
            'Transportation',

            // Healthcare
            'Medications',
            'Doctor Visits',
            'Dental Care',

            // Education and Development
            'Courses and Trainings',
            'Language Learning',
            'Books and Educational Materials',

            // Lifestyle and Hobbies
            'Dining Out',
            'Games and Toys',
            'Photography Equipment',

            // Home Maintenance
            'Furniture and Appliances',
            'Cleaning Supplies',
            'Home Repairs and Renovations',

            // Fashion and Beauty
            'Clothing and Accessories',
            'Cosmetics',
            'Hairdressing and Spa',

            // Entertainment and Leisure
            'Culture (Cinema, Theater, Concerts)',
            'Travel',
            'Outdoor Activities',

            // Investments and Savings
            'Investments (Stocks, Bonds, Crypto)',
            'Savings Accounts',
            'Real Estate',

            // Charity and Support
            'Donations',
            'Family Support',

            // Technology
            'Electronic Equipment',
            'Gadgets',
        ];
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index($user_id = null)
    {
        $token = $this->request->getHeader('Authorization');
        if ($user_id != null) {
            if ($user_id !== null && count($token) > 0) {
                $user = $this->Expenses->Users->get($user_id);
                if ($user->token != null) {
                    if ($user->token == $token[0]) {
                        $expenses = $this->Expenses->find()->contain(['ECategory'])->where(['user_id' => $user_id])->all();

                        return $this->response->withStatus(200)->withStringBody(json_encode($expenses));
                    }
                }
            }

            return $this->response->withStatus(401)->withStringBody(json_encode(['message' => 'Not Authorized']));
        } else {
            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'Expenses have not been found']));
        }
    }

    /**
     * View method
     *
     * @param int|null $user_id Expense id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?int $user_id = null, $id = null)
    {
        $token = $this->request->getHeader('Authorization');
        if ($user_id != null || $id != null) {
            if ($user_id !== null && count($token) > 0) {
                $user = $this->Expenses->Users->get($user_id);
                if ($user->token != null) {
                    if ($user->token == $token[0]) {
                        try {
                            $expenses = $this->Expenses->find()->contain(['ECategory'])->where(['user_id' => $user_id, 'expenses.id' => $id])->firstOrFail();

                            return $this->response->withStatus(200)->withStringBody(json_encode($expenses));
                        } catch (RecordNotFoundException $e) {
                            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'Expense has not be found']));
                        }
                    }
                }
            }

            return $this->response->withStatus(401)->withStringBody(json_encode(['message' => 'Not Authorized']));
        } else {
            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'User has not be found']));
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add($user_id = null)
    {
        $token = $this->request->getHeader('Authorization');
        if ($user_id != null) {
            if ($user_id !== null && count($token) > 0) {
                $user = $this->Expenses->Users->get($user_id);
                if ($user->token != null) {
                    if ($user->token == $token[0]) {
                        try {
                            $expense = $this->Expenses->newEntity($this->request->getData());
                            $expense->user_id = $user_id;
                            if ($expense->currency == null || $expense->currency == '' || $expense->currency == 0) {
                                return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'Expense has not had currency']));
                            }
                            if ($expense->name == null || $expense->name == '' || strlen($expense->name) == 0 || strlen($expense->name) > 20) {
                                return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'Expense has not had name']));
                            }
                            $expense->currency = round(floatval($expense->currency), 2);
                            if ($expense->category_id == null || $expense->category_id == '' || $expense->category_id == 0) {
                                return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'Expense has not had category']));
                            }
                            if ($this->Expenses->save($expense)) {
                                return $this->response->withStatus(200)->withStringBody(json_encode(['message' => 'Expense has been saved']));
                            } else {
                                return $this->response->withStatus(500)->withStringBody(json_encode(['message' => 'Expense has not been saved']));
                            }
                        } catch (RecordNotFoundException $e) {
                            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'Expense has not been found']));
                        }
                    }
                }
            }

            return $this->response->withStatus(401)->withStringBody(json_encode(['message' => 'Not Authorized']));
        } else {
            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'User has not been found']));
        }
    }

    /**
     * Edit method
     *
     * @param int|null $id Expense id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?int $user_id = null, ?int $id = null)
    {
        $token = $this->request->getHeader('Authorization');
        if ($user_id != null || $id != null) {
            if (count($token) > 0) {
                $user = $this->Expenses->Users->get($user_id);
                if ($user->token != null) {
                    if ($user->token == $token[0]) {
                        $newExpense = $this->Expenses->newEntity($this->request->getData());
                        $newExpense->user_id = $user_id;
                        $newExpense->id = $id;
                        if ($newExpense->currency != null || $newExpense->currency != '') {
                            $newExpense->currency = round(floatval($newExpense->currency), 2);
                        }
                        if ($this->Expenses->save($newExpense)) {
                            return $this->response->withStatus(200)->withStringBody(json_encode(['message' => 'Expense has been edited']));
                        } else {
                            return $this->response->withStatus(500)->withStringBody(json_encode(['message' => 'Expense has not been edit']));
                        }
                    }
                }
            }

            return $this->response->withStatus(401)->withStringBody(json_encode(['message' => 'Not Authorized']));
        } else {
            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'User has not been found']));
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Expense id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?int $user_id = null, ?int $id = null)
    {
        $token = $this->request->getHeader('Authorization');
        if ($user_id != null || $id != null) {
            if (count($token) > 0) {
                $user = $this->Expenses->Users->get($user_id);
                if ($user->token != null) {
                    if ($user->token == $token[0]) {
                        $expense = $this->Expenses->get($id);
                        if ($this->Expenses->delete($expense)) {
                            return $this->response->withStatus(200)->withStringBody(json_encode(['message' => 'Expense has been deleted']));
                        } else {
                            return $this->response->withStatus(500)->withStringBody(json_encode(['message' => 'Expense has not been delete']));
                        }
                    }
                }
            }

            return $this->response->withStatus(401)->withStringBody(json_encode(['message' => 'Not Authorized']));
        } else {
            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'User has not been found']));
        }
    }

    public function getCategories()
    {
        return $this->response->withStatus(200)->withStringBody(json_encode($this->categories));
    }

    public function options()
    {
        return $this->response->withStatus(200);
    }
}
