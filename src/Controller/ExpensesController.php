<?php
declare(strict_types=1);

namespace App\Controller;

use App\Services\ExpensesService;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Http\Response;
use Cake\I18n\Date;

/**
 * Expenses Controller
 *
 * @property \App\Model\Table\ExpensesTable $Expenses
 * @property \App\Controller\Component\ExpensesMathComponent $ExpensesMath
 */
class ExpensesController extends AppController
{
    private $categories;

    /**
     * @throws \Exception
     */
    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->response = $this->response->withHeader('Access-Control-Allow-Origin', 'http://localhost:3000')
            ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
            ->withHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization')
            ->withHeader('Access-Control-Allow-Credentials', 'true')
            ->withType('json/application');
        $this->loadComponent('ExpensesMath');
        $this->categories = [
            'Rent / Housing Costs',
            'Groceries',
            'Transportation',
            'Medications',
            'Doctor Visits',
            'Dental Care',
            'Courses and Trainings',
            'Language Learning',
            'Books and Educational Materials',
            'Dining Out',
            'Games and Toys',
            'Photography Equipment',
            'Furniture and Appliances',
            'Cleaning Supplies',
            'Home Repairs and Renovations',
            'Clothing and Accessories',
            'Cosmetics',
            'Hairdressing and Spa',
            'Culture (Cinema, Theater, Concerts)',
            'Travel',
            'Outdoor Activities',
            'Investments (Stocks, Bonds, Crypto)',
            'Savings Accounts',
            'Real Estate',
            'Donations',
            'Family Support',
            'Electronic Equipment',
            'Gadgets',
        ];
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index($user_id = null)
    {
        $token = $this->request->getHeader('Authorization');
        if ($user_id != null) {
            if ($user_id !== null && count($token) > 0) {
                $user = $this->Expenses->Users->get($user_id);
                if ($user->token != null) {
                    if ($user->token == $token[0]) {
                        $expenses = $this->Expenses->find()->contain(['ECategory'])->where(['user_id' => $user_id])->all();

                        return $this->response->withStatus(200)->withStringBody(json_encode($expenses));
                    }
                }
            }

            return $this->response->withStatus(401)->withStringBody(json_encode(['message' => 'Not Authorized']));
        } else {
            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'Expenses have not been found']));
        }
    }

    /**
     * View method
     *
     * @param int|null $user_id Expense id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?int $user_id = null, $id = null)
    {
        $token = $this->request->getHeader('Authorization');
        if ($user_id != null || $id != null) {
            if ($user_id !== null && count($token) > 0) {
                $user = $this->Expenses->Users->get($user_id);
                if ($user->token != null) {
                    if ($user->token == $token[0]) {
                        try {
                            $expenses = $this->Expenses->find()->contain(['ECategory'])->where(['user_id' => $user_id, 'expenses.id' => $id])->firstOrFail();
                            return $this->response->withStatus(200)->withStringBody(json_encode($expenses));
                        } catch (RecordNotFoundException $e) {
                            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'Expense has not be found']));
                        }
                    }
                }
            }

            return $this->response->withStatus(401)->withStringBody(json_encode(['message' => 'Not Authorized']));
        } else {
            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'User has not be found']));
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add($user_id = null)
    {
        $token = $this->request->getHeader('Authorization');
        if ($user_id != null) {
            if ($user_id !== null && count($token) > 0) {
                $user = $this->Expenses->Users->get($user_id);
                if ($user->token != null) {
                    if ($user->token == $token[0]) {
                        try {
                            $expense = $this->Expenses->newEntity($this->request->getData());
                            $expense->user_id = $user_id;
                            $expense->date = new Date();
                            if ($expense->currency == null || $expense->currency == '' || $expense->currency == 0) {
                                return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'Expense has not had currency']));
                            }
                            if ($expense->name == null || $expense->name == '' || strlen($expense->name) == 0 || strlen($expense->name) > 20) {
                                return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'Expense has not had name']));
                            }
                            $expense->currency = round(floatval($expense->currency), 2);
                            $expense->deposit = round(floatval($expense->deposit), 2);
                            if ($expense->category_id == null || $expense->category_id == '' || $expense->category_id == 0) {
                                return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'Expense has not had category']));
                            }
                            if ($this->Expenses->save($expense)) {
                                return $this->response->withStatus(200)->withStringBody(json_encode(['message' => 'Expense has been saved']));
                            } else {
                                return $this->response->withStatus(500)->withStringBody(json_encode(['message' => 'Expense has not been saved']));
                            }
                        } catch (RecordNotFoundException $e) {
                            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'Expense has not been found']));
                        }
                    }
                }
            }

            return $this->response->withStatus(401)->withStringBody(json_encode(['message' => 'Not Authorized']));
        } else {
            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'User has not been found']));
        }
    }

    /**
     * Edit method
     *
     * @param int|null $id Expense id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?int $user_id = null, ?int $id = null)
    {
        $token = $this->request->getHeader('Authorization');
        if ($user_id != null || $id != null) {
            if (count($token) > 0) {
                $user = $this->Expenses->Users->get($user_id);
                if ($user->token != null) {
                    if ($user->token == $token[0]) {
                        $newExpense = $this->Expenses->newEntity($this->request->getData());
                        $newExpense->user_id = $user_id;
                        $newExpense->id = $id;
                        if ($newExpense->currency != null || $newExpense->currency != '') {
                            $newExpense->currency = round(floatval($newExpense->currency), 2);
                        }
                        if ($this->Expenses->save($newExpense)) {
                            return $this->response->withStatus(200)->withStringBody(json_encode(['message' => 'Expense has been edited']));
                        } else {
                            return $this->response->withStatus(500)->withStringBody(json_encode(['message' => 'Expense has not been edit']));
                        }
                    }
                }
            }

            return $this->response->withStatus(401)->withStringBody(json_encode(['message' => 'Not Authorized']));
        } else {
            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'User has not been found']));
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Expense id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?int $user_id = null, ?int $id = null)
    {
        $token = $this->request->getHeader('Authorization');
        if ($user_id != null || $id != null) {
            if (count($token) > 0) {
                $user = $this->Expenses->Users->get($user_id);
                if ($user->token != null) {
                    if ($user->token == $token[0]) {
                        $expense = $this->Expenses->get($id);
                        if ($this->Expenses->delete($expense)) {
                            return $this->response->withStatus(200)->withStringBody(json_encode(['message' => 'Expense has been deleted']));
                        } else {
                            return $this->response->withStatus(500)->withStringBody(json_encode(['message' => 'Expense has not been delete']));
                        }
                    }
                }
            }

            return $this->response->withStatus(401)->withStringBody(json_encode(['message' => 'Not Authorized']));
        } else {
            return $this->response->withStatus(404)->withStringBody(json_encode(['message' => 'User has not been found']));
        }
    }

    public function getCategories()
    {
        return $this->response->withStatus(200)->withStringBody(json_encode($this->categories));
    }

    public function options()
    {
        return $this->response->withStatus(200);
    }

    /**
     * @param int|null $user_id
     * @return Response
     */
    public function calculateExpenses(?int $user_id = null): Response
    {

        if ($user_id != null) {
            $results = $this->Expenses->find()->select(['total_currency' => 'SUM(Expenses.currency)', 'category_name' => 'ECategory.name'])
                ->join(['ECategory' => [
                    'table' => 'e_category',
                    'type' => 'INNER',
                    'conditions' => 'ECategory.id = Expenses.category_id'
                ]])
                ->group('Expenses.category_id');
            $total_currency = array_column( $results->toArray(), 'total_currency');
            $category_name = array_column( $results->toArray(), 'category_name');
            $calculateExpenses = $this->ExpensesMath->calcPercentExpenses($total_currency);
            $finalTable = $this->ExpensesMath->mergeTable($calculateExpenses, $category_name);
            return $this->response->withStatus(200)->withStringBody(json_encode($finalTable));
        } else {
            return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'XD NIE DZIALA UwU']));
        }
    }

    public function calculateExpensesByCategory(?int $user_id = null, ?int $category_id = null): Response
    {

        if ($user_id != null && $category_id != null) {
            $expenses = $this->Expenses->find()->where(['user_id' => $user_id, 'category_id' => $category_id]);
            $currency = array_column($expenses->select('currency')->toArray(), 'currency');
            $arrayName = array_column($expenses->select('name')->toArray(), 'name');
            $calcPercentExpenses = $this->ExpensesMath->calcPercentExpenses($currency);
            $finalArray = $this->ExpensesMath->mergeTable($calcPercentExpenses, $arrayName);
            return $this->response->withStatus(200)->withStringBody(json_encode($finalArray));
        } else {
            return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'XD NIE DZIALA UwU']));
        }
    }
    public function calculatePaidExpensesByCategory(?int $user_id = null): Response
    {
        if ($user_id != null) {
            $results = $this->Expenses->find()->select(['total_currency' => 'SUM(Expenses.currency)', "total_deposit" => 'SUM(Expenses.deposit)' , 'category_name' => 'ECategory.name'])
                ->join(['ECategory' => [
                    'table' => 'e_category',
                    'type' => 'INNER',
                    'conditions' => 'ECategory.id = Expenses.category_id'
                ]])
                ->group('Expenses.category_id');
            $total_currency = array_column( $results->toArray(), 'total_currency');
            $total_deposit = array_column( $results->toArray(), 'total_deposit');
            $category_name = array_column( $results->toArray(), 'category_name');

            $total_delta_money = $this->ExpensesMath->depositByCurrently($total_currency, $total_deposit);
            $finalTable = $this->ExpensesMath->mergeTable($total_delta_money, $category_name);
            return $this->response->withStatus(200)->withStringBody(json_encode($finalTable));
        } else {
            return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'XD NIE DZIALA UwU']));
        }
    }

    public function calculatePaidExpenses(int $user_id = null): Response
    {
        if ($user_id != null) {
            $results = $this->Expenses->find()->select(['total_currency' => 'SUM(Expenses.currency)', "total_deposit" => 'SUM(Expenses.deposit)' , 'category_name' => 'ECategory.name'])
                ->join(['ECategory' => [
                    'table' => 'e_category',
                    'type' => 'INNER',
                    'conditions' => 'ECategory.id = Expenses.category_id'
                ]])
                ->group('Expenses.category_id');
            $total_currency = array_column( $results->toArray(), 'total_currency');
            $total_deposit = array_column( $results->toArray(), 'total_deposit');
            $category_name = array_column( $results->toArray(), 'category_name');

            $total_delta_money = $this->ExpensesMath->depositByCurrently($total_currency, $total_deposit);
            $finalTable = $this->ExpensesMath->mergeTable($total_delta_money, $category_name);
            return $this->response->withStatus(200)->withStringBody(json_encode($finalTable));
        } else {
            return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'XD NIE DZIALA UwU']));
        }
    }
    public function calculatePaidExpensesAvg(int $user_id = null): Response
    {
        if ($user_id != null) {
            $results = $this->Expenses->find()->select(['total_currency' => 'SUM(Expenses.currency)', "total_deposit" => 'SUM(Expenses.deposit)' , 'category_name' => 'ECategory.name'])
                ->join(['ECategory' => [
                    'table' => 'e_category',
                    'type' => 'INNER',
                    'conditions' => 'ECategory.id = Expenses.category_id'
                ]])
                ->group('Expenses.category_id');
            $total_currency = array_column( $results->toArray(), 'total_currency');
            $total_deposit = array_column( $results->toArray(), 'total_deposit');

            $total_delta_money = $this->ExpensesMath->depositByCurrently($total_currency, $total_deposit);

            return $this->response->withStatus(200)->withStringBody(json_encode(['average' => round( (array_sum($total_delta_money) / count($total_delta_money)), 2)]));
        } else {
            return $this->response->withStatus(400)->withStringBody(json_encode(['message' => 'XD NIE DZIAŁĄ UwU']));
        }
    }
}
